// Mocks generated by Mockito 5.4.6 from annotations
// in finally_done/test/screens/task_toggle_error_handling_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:finally_done/providers/tasks_provider.dart' as _i2;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTasksState_0 extends _i1.SmartFake implements _i2.TasksState {
  _FakeTasksState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksNotifier extends _i1.Mock implements _i2.TasksNotifier {
  MockTasksNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i3.Stream<_i2.TasksState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.TasksState>.empty(),
      ) as _i3.Stream<_i2.TasksState>);

  @override
  _i2.TasksState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTasksState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.TasksState);

  @override
  _i2.TasksState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeTasksState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.TasksState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set state(_i2.TasksState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> fetchTasks() => (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> createTask(
    String? title, {
    String? taskListId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [title],
          {#taskListId: taskListId},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> completeTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [taskId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> uncompleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #uncompleteTask,
          [taskId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void updateTaskStatusLocally(
    String? taskId,
    String? newStatus,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTaskStatusLocally,
          [
            taskId,
            newStatus,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void setSelectedTaskList(String? taskListId) => super.noSuchMethod(
        Invocation.method(
          #setSelectedTaskList,
          [taskListId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> retryTasks() => (super.noSuchMethod(
        Invocation.method(
          #retryTasks,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void setTaskList(String? taskListId) => super.noSuchMethod(
        Invocation.method(
          #setTaskList,
          [taskListId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> refreshTasks() => (super.noSuchMethod(
        Invocation.method(
          #refreshTasks,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool updateShouldNotify(
    _i2.TasksState? old,
    _i2.TasksState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i5.Listener<_i2.TasksState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);
}
